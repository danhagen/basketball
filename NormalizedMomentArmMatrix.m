function [ NormalizedMuscleVelocity ] = NormalizedMomentArmMatrix( Angle1SplineStructures,Angle2SplineStructures,Angle3SplineStructures,Time)
%Replaces the code within testspline.m that computes the Normalized Muscle
%Fiber Velocities from the angular velocities. Must input Time along with
%angle spline structures in order to use ppval(). Also, spline structure
%arrays must be the same length.
%Written 2/29/16. Modified 2/29/16.

if nargin > 4
    error('myfuns:NormalizedMomentArmMatrix:TooManyInputs', ...
        'requires 4 inputs');
end
if nargin < 4
    error('myfuns:NormalizedMomentArmMatrix:TooFewInputs', ...
        'requires 4 inputs');
end
if length(Angle1SplineStructures)~=length(Angle2SplineStructures)
    error('myfuns:NormalizedMomentArmMatrix:ArrayLength', ...
        'Spline Structure arrays must be equal length');
end
if length(Angle1SplineStructures)~=length(Angle3SplineStructures)
    error('myfuns:NormalizedMomentArmMatrix:ArrayLength', ...
        'Spline Structure arrays must be equal length');
end

%R_tranpose Column 1
r1DELTa = 19;
r1CB = 20;
r1DELTp = -8;
r1BIC = 15;
r1TRI = -15;
r1BRA = 0;
r1BRD = 0;
r1PRO = 0;
r1FCR = 0;
r1ECRB = 0;
r1ECRL = 0;
r1FCU = 0;
r1FDS = 0;
r1PL = 0;
r1ECU = 0;
r1EDM = 0;
r1EDC = 0;
r1APL = 0;

%R_tranpose Column 2
r2DELTa = 0;
r2CB = 0;
r2DELTp = 0;
r2BIC = @(Angle2) (24777*pi)/10000 + (1288265228720957.*Angle2)./35184372088832 - (2429*pi.*Angle2)./125 + (68251*pi.*(Angle2.^2))./5000 - (10427*pi.*(Angle2.^3))./5000 + (20571.*(Angle2.^2))./10000 - (14043.*(Angle2.^3))./2500 + 84533/10000;
r2TRI = @(Angle2) - (8759.*(Angle2.^3))./5000 + (93509.*(Angle2.^2))./10000 - (88691.*Angle2)./10000 - 863614486669217/35184372088832;
r2BRA = @(Angle2) - (12667.*(Angle2.^3))./2000 + (30689.*(Angle2.^2))./1250 - (4544779416463265.*Angle2)./281474976710656 + 1139910323808397/70368744177664;
r2BRD = @(Angle2) (28129*pi)/10000 - (23671.*Angle2)./2000 - (57781*pi.*Angle2)./10000 + (3629*pi.*(Angle2.^2))./1250 - (197*pi.*(Angle2.^3))./500 + (24636921970321.*(Angle2.^2))./549755813888 - (33739.*(Angle2.^3))./2500 + 38141/2500;
r2PRO = @(Angle2) (3933*pi)/10000 - (10079.*Angle2)./10000 - (13103*pi.*Angle2)./1250 + (2597831076304493*pi.*(Angle2.^2))./70368744177664 + (2202*pi^2.*Angle2)/625 - (93111*pi.*(Angle2.^3))./2500 + (72987*pi.*(Angle2.^4))./5000 - (20089*pi.*(Angle2.^5))./10000 - (4369*pi^2)/10000 - (6847666938421497.*(Angle2.^2))./562949953421312 + (53151.*(Angle2.^3))./2500 - (5503.*(Angle2.^4))./500 + (8763.*(Angle2.^5))./5000 - (1466808324885735*pi^2.*(Angle2.^2))./140737488355328 + (51333*pi^2.*(Angle2.^3))./5000 - (39919*pi^2.*(Angle2.^4))/10000 + (273*pi^2.*(Angle2.^5))./500 + 22081/2000;
r2FCR = 14;
r2ECRB = @(Angle2) (8199*pi)/5000 + (44637.*Angle2)./2500 - (5073*pi.*Angle2)./10000 - (471*pi.*(Angle2.^2))./5000 - (28827.*(Angle2.^2))./10000 - 1407/125;
r2ECRL = @(Angle2) (74361*pi)/10000 + (72089699777459.*Angle2)./4398046511104 - (8783*pi.*Angle2)./5000 + (371*pi^2.*Angle2)./5000 - (1667*pi^2)/1250 - 38517/5000;
r2FCU = 19;
r2FDS = 20;
r2PL = 25;
r2ECU = -23;
r2EDM = -10;
r2EDC = -20;
r2APL = 0;

%R_tranpose Column 3
r3DELTa = 0;
r3CB = 0;
r3DELTp = 0;
r3BIC = 0;
r3TRI = 0;
r3BRA = 0;
r3BRD = 0;
r3PRO = 0;
r3FCR = @(Angle3) (3199.*Angle3)./2000 + 3301/250;
r3ECRB = @(Angle3) (21411.*Angle3)./10000 - 7562500789275879/562949953421312;
r3ECRL = @(Angle3) (457.*Angle3)./200 - 58583/5000;
r3FCU = @(Angle3) (13307.*(Angle3.^2))./10000 + (1869.*Angle3)./400 + 1578328710658497/140737488355328;
r3FDS = @(Angle3) (2099.*(Angle3.^2))./2000 + (10641.*Angle3)./10000 + 5824674283064289/562949953421312;
r3PL = @(Angle3) (5011.*(Angle3.^2))./10000 + (13821.*Angle3)./10000 + 3749/400;
r3ECU = @(Angle3) (3883.*Angle3)./1250 - 21289/2500;
r3EDM = @(Angle3) (7603.*Angle3)./2500 - 7791/625;
r3EDC = @(Angle3) (693.*Angle3)./400 - 35319/2500;
r3APL = @(Angle3) 1171/2000 - (171.*(Angle3.^2))./2000 - (73.*Angle3)./2500;

i = 1;
NumberOfTrials = length(Angle1SplineStructures);
NormalizedMuscleVelocity = zeros(18,length(Time),NumberOfTrials);

AngularVelocity1SplineStructures = struct('form','pp',...
    'breaks',num2cell(zeros(NumberOfTrials,1)),...
    'coefs',num2cell(zeros(NumberOfTrials,1)),...
    'pieces',num2cell(ones(NumberOfTrials,1)),...
    'order',num2cell(ones(NumberOfTrials,1)),...
    'dim',num2cell(zeros(NumberOfTrials,1)));
AngularVelocity2SplineStructures = struct('form','pp',...
    'breaks',num2cell(zeros(NumberOfTrials,1)),...
    'coefs',num2cell(zeros(NumberOfTrials,1)),...
    'pieces',num2cell(ones(NumberOfTrials,1)),...
    'order',num2cell(ones(NumberOfTrials,1)),...
    'dim',num2cell(zeros(NumberOfTrials,1)));
AngularVelocity3SplineStructures = struct('form','pp',...
    'breaks',num2cell(zeros(NumberOfTrials,1)),...
    'coefs',num2cell(zeros(NumberOfTrials,1)),...
    'pieces',num2cell(ones(NumberOfTrials,1)),...
    'order',num2cell(ones(NumberOfTrials,1)),...
    'dim',num2cell(zeros(NumberOfTrials,1)));

OptimalMuscleLength = [(9.8)     (9.3)      (13.7)      (11.6)      (13.4)    (8.6)    ...
                      (17.3)     (4.9)       (6.3)       (5.9)       (8.1)    (5.1)    ...
                       (8.4)     (6.4)       (6.2)       (6.8)         (7)    (7.1)];
% OptimalMuscleLength =[DELTa       CB        DELTp      BIC(long)  TRI(long)   BRA
%                        BRD       PRO         FCR         ECRB        ECRL     FCU
%                       FDS(i)      PL         ECU         EDM        EDC(i)    APL

while i <= NumberOfTrials
        AngularVelocity1SplineStructures(i) = ppdiff(Angle1SplineStructures(i));
        AngularVelocity2SplineStructures(i) = ppdiff(Angle2SplineStructures(i));
        AngularVelocity3SplineStructures(i) = ppdiff(Angle3SplineStructures(i));
        
        Angle2 = ppval(Angle2SplineStructures(i),Time);
        Angle3 = ppval(Angle3SplineStructures(i),Time);
        
        AngularVelocity1 = ppval(AngularVelocity1SplineStructures(i),Time);
        AngularVelocity2 = ppval(AngularVelocity2SplineStructures(i),Time);
        AngularVelocity3 = ppval(AngularVelocity3SplineStructures(i),Time);
        
        NormalizedMuscleVelocity(:,:,i) = [ ...         Muscle 1
                                            (-AngularVelocity1.*r1DELTa...
                                            -AngularVelocity2.*r2DELTa...
                                            -AngularVelocity3.*r3DELTa)...
                                            ./(10*OptimalMuscleLength(1));
                                            ...         Muscle 2
                                            (-AngularVelocity1.*r1CB...
                                            -AngularVelocity2.*r2CB...
                                            -AngularVelocity3.*r3CB)...
                                            ./(10*OptimalMuscleLength(2));
                                            ...         Muscle 3
                                            (-AngularVelocity1.*r1DELTp...
                                            -AngularVelocity2.*r2DELTp...
                                            -AngularVelocity3.*r3DELTp)...
                                            ./(10*OptimalMuscleLength(3));
                                            ...         Muscle 4
                                            (-AngularVelocity1.*r1BIC...
                                            -AngularVelocity2.*r2BIC(Angle2)...
                                            -AngularVelocity3.*r3BIC)...
                                            ./(10*OptimalMuscleLength(4));
                                            ...         Muscle 5
                                            (-AngularVelocity1.*r1TRI...
                                            -AngularVelocity2.*r2TRI(Angle2)...
                                            -AngularVelocity3.*r3TRI)...
                                            ./(10*OptimalMuscleLength(5));
                                            ...         Muscle 6
                                            (-AngularVelocity1.*r1BRA...
                                            -AngularVelocity2.*r2BRA(Angle2)...
                                            -AngularVelocity3.*r3BRA)...
                                            ./(10*OptimalMuscleLength(6));
                                            ...         Muscle 7
                                            (-AngularVelocity1.*r1BRD...
                                            -AngularVelocity2.*r2BRD(Angle2)...
                                            -AngularVelocity3.*r3BRD)...
                                            ./(10*OptimalMuscleLength(7));
                                            ...         Muscle 8
                                            (-AngularVelocity1.*r1PRO...
                                            -AngularVelocity2.*r2PRO(Angle2)...
                                            -AngularVelocity3.*r3PRO)...
                                            ./(10*OptimalMuscleLength(8));
                                            ...         Muscle 9
                                            (-AngularVelocity1.*r1FCR...
                                            -AngularVelocity2.*r2FCR...
                                            -AngularVelocity3.*r3FCR(Angle3))...
                                            ./(10*OptimalMuscleLength(9));
                                            ...         Muscle 10
                                            (-AngularVelocity1.*r1ECRB...
                                            -AngularVelocity2.*r2ECRB(Angle2)...
                                            -AngularVelocity3.*r3ECRB(Angle3))...
                                            ./(10*OptimalMuscleLength(10));
                                            ...         Muscle 11
                                            (-AngularVelocity1.*r1ECRL...
                                            -AngularVelocity2.*r2ECRL(Angle2)...
                                            -AngularVelocity3.*r3ECRL(Angle3))...
                                            ./(10*OptimalMuscleLength(11));
                                            ...         Muscle 12
                                            (-AngularVelocity1.*r1FCU...
                                            -AngularVelocity2.*r2FCU...
                                            -AngularVelocity3.*r3FCU(Angle3))...
                                            ./(10*OptimalMuscleLength(12));
                                            ...         Muscle 13
                                            (-AngularVelocity1.*r1FDS...
                                            -AngularVelocity2.*r2FDS...
                                            -AngularVelocity3.*r3FDS(Angle3))...
                                            ./(10*OptimalMuscleLength(13));
                                            ...         Muscle 14
                                            (-AngularVelocity1.*r1PL...
                                            -AngularVelocity2.*r2PL...
                                            -AngularVelocity3.*r3PL(Angle3))...
                                            ./(10*OptimalMuscleLength(14));
                                            ...         Muscle 15
                                            (-AngularVelocity1.*r1ECU...
                                            -AngularVelocity2.*r2ECU...
                                            -AngularVelocity3.*r3ECU(Angle3))...
                                            ./(10*OptimalMuscleLength(15));
                                            ...         Muscle 16
                                            (-AngularVelocity1.*r1EDM...
                                            -AngularVelocity2.*r2EDM...
                                            -AngularVelocity3.*r3EDM(Angle3))...
                                            ./(10*OptimalMuscleLength(16));
                                            ...         Muscle 17
                                            (-AngularVelocity1.*r1EDC...
                                            -AngularVelocity2.*r2EDC...
                                            -AngularVelocity3.*r3EDC(Angle3))...
                                            ./(10*OptimalMuscleLength(17));
                                            ...         Muscle 18
                                            (-AngularVelocity1.*r1APL...
                                            -AngularVelocity2.*r2APL...
                                            -AngularVelocity3.*r3APL(Angle3))...
                                            ./(10*OptimalMuscleLength(18)) ];        
        i=i+1;
end

end

